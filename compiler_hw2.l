%{

/*	Definition section */

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "y.tab.h"	/* header file generated by bison */
	
extern YYSTYPE yylval; //YYSTYPE
extern int yylineno;

%}

/*	define regular expression label */
newline		[\n]
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
double      {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%x INPUT_STRING1
%x INPUT_STRING2
%x COMMENT
%option yylineno 

%%
 /*	Rules section */
"+="	{ return ASSIGN_ADD;}
"-="	{ return ASSIGN_SUB;}
"*="	{ return ASSIGN_MUL;}
"/="	{ return ASSIGN_DIV;}
"%="	{ return ASSIGN_MOD;}

 /* Arithmetic */
"+"     { return ADD;}
"-" 	{ return SUB;}
"*" 	{ return MUL;}
"/" 	{ return DIV;}
"%"     { return MOD;}
"++"    { return INCREMENT;}
"--"    { return DECREMENT;}

 /* Relational */
"="		{ return ASSIGNMENT;}
">"		{ return LARGETHAN;}
"<"		{ return LESSTHAN;}
">="	{ return LARGE_EQ;}
"<="	{ return LESS_EQ;}
"=="	{ return EQ;}
"!="	{ return NOT_EQ;}

 /* Logical */
"&&"	{ return AND;}
"||"	{ return OR;}
"!"		{ return NOT;}

 /* Delimiters */
"("		{ return LB;}
")"		{ return RB;}
"{"		{ return LCB;}
"}"		{ return RCB;}

 /* Print Keywords */	
"print"		{ return PRINT;}
"println"	{ return PRINTLN;}

 /* Condition and Loop Keywords */
"if"		{ return IF;}
"else"		{ return ELSE;}
"for"		{ return FOR;}

 /* Declaration Keywords */
"var"		{ return VAR;}
"void"		{ return VOID;}
"int"		{ return INT;}
"float32"	{ return FLOAT;}

" "			{ }
","			{ }
";"			{ }

 /* C++ type Comment */
"//".*"\n"					{ /*++yylineno;return NEWLINE;*/ }

 /* C type Comment */
"/*"						{ BEGIN COMMENT; }
	<COMMENT>[^*\n]*	   	{ }
	<COMMENT>"*"+[^*/\n]*   { }
	<COMMENT>\n		   		{ /*++yylineno;return NEWLINE;*/ }
	<COMMENT>"*"+"/"	   	{ BEGIN INITIAL; }

 /*S tring Constant */
["]							{ BEGIN INPUT_STRING1; }
	<INPUT_STRING1>[^"]*	{ strcpy(yylval.string, yytext); BEGIN INPUT_STRING2; return STRING; }
	<INPUT_STRING2>["]		{ BEGIN INITIAL; }
	
{id} 				{  strcpy(yylval.string, yytext); return ID; }
{integer}			{  yylval.i_val = atoi(yytext); return NUMBER; }
{double}			{  yylval.f_val = atof(yytext); return FLOATNUM; }

 /* others */
[\n]				{ /*++yylineno; return NEWLINE;*/}
[\t]+				{ } /* Ignore */
[^; \t] 	{ ;} /* Ignore other charactor sets */

%%

/*	C Code section */

int yywrap(void) {
    return 1;
}

